import PacketTypes from 'dimensions/packettypes';
import Client from 'dimensions/client';
import PacketWriter from 'dimensions/packets/packetwriter';
import ClientState from 'dimensions/clientstate';
import GlobalTracking from 'dimensions/globaltracking';
import ServerDetails from 'dimensions/serverdetails';

export interface Command {
  name: string;
  args: string[];
}

/**
 * Handles commands before they go to any terraria servers
 */
export class ClientCommandHandler {
  /**
   * Turns a message into a command object, splitting the command name
   * from its arguments.
   * 
   * @param message The message to convert into a command object
   * @return The command object created
   */
  public parseCommand(message: string): Command {
    let args: string[] = message.split(' ');
    let name: string = message.substr(1, args[0].length - 1);
    
    // Remove first arg as it is the command name
    args.splice(0, 1);
    return { name: name.toLowerCase(), args: args };
  }

  /**
   * Handles any matching command from the client
   * 
   * @param command The command object with the name and args
   * @param client The client that is trying to use the command
   * @return whether or not the command was handled
   */
  public handle(command: Command, client: Client): boolean {
    let handled: boolean = false;
    if (client.servers[command.name]) {
      if (client.server.name.toLowerCase() == command.name && client.connected) {
        client.sendChatMessage("You are already in that server.", "FC4E4E");
      } else {
        if (client.state === ClientState.FullyConnected || client.state === ClientState.Disconnected) {
          client.sendChatMessage("Sending you to " + client.servers[command.name].name + "!", "9bf779");
          
          client.changeServer(client.servers[command.name]);
        } else {
          client.sendChatMessage("Please wait to fully connect to your current server before switching!", "FC4E4E");
        }
      }
      handled = true;
    } else {
      switch (command.name) {
        case "who":
        case "online":
          handled = this.handleWho(command.args, client);
          break;
        case "dimensions":
        case "lobby":
        case "server":
        case "servers":
          handled = this.handleDimensions(command.args, client);
          break;
        case "tp":
          handled = this.handleTp(command.args[0], client);
          break;

      }
    }

    return handled;
  }

  /**
   * Adds a message denoting how many users exist in total on this Dimensions instance
   * 
   * @param args The command args
   * @param client The client executing who
   * @return Whether or not the who command was handled
   */
  private handleWho(args: string[], client: Client): boolean {
    let total: number = 0;
    let keys: string[] = Object.keys(client.serversDetails);
    for (let i: number = 0, len = keys.length; i < len; i++) {
      total += client.serversDetails[keys[i]].clientCount;
    }

    // Try to make it come after the normal response
    setTimeout(function () {
      client.sendChatMessage("There are " + total + " players across all TBC servers!", "9bf779");
    }, 100);
    return false;
  }

  /**
   * Gives the client a list of dimensions available prefixed with '/'
   * 
   * @param args The command args
   * @param client The client who is executing the command
   * @return Whether the dimensions command was handled
   */
  private handleDimensions(args: string[], client: Client): boolean {
    let dimensionsList: string = "";
    let dimensionNames: string[] = Object.keys(client.servers);
    for (let i: number = 0; i < dimensionNames.length; i++) {
      let name: string = dimensionNames[i];
      let hidden: boolean = client.servers[name].hidden;
      if (!hidden) {
        dimensionsList += (i > 0 ? "[c/9bf779:,] " : " ") + "/" + client.servers[name].name;
      }
    }

    client.sendChatMessage("TBC Servers: ", "d67d29");
    client.sendChatMessage(dimensionsList);

    return true;
  }

  private handleTp(user: string, client: Client): boolean {
    let dimensionNames: string[] = Object.keys(client.servers);
    let foundServer: string = "";
    for (let i: number = 0; i < dimensionNames.length; i++) {
      let name: string = dimensionNames[i];
      let hidden: boolean = client.servers[name].hidden;
      if (!hidden) {
        let server: ServerDetails = client.serversDetails[name];
        var player = server.playerList.find((player) => player.name == user);
        if (player != null){
          foundServer = name;
        }
      }
    if(foundServer == ""){
      client.sendChatMessage("Player not found on any servers!", "d67d29");
      return true;
    }

    client.sendChatMessage("Sending you to " + foundServer + "!", "9bf779");
    client.changeServer(client.servers[foundServer]);
    }
    return true;
  }

  /** REMOVED, UNNECESSARY, USED TO TRICK OTHER PLAYERS
   * Allows a user to disconnect from their current dimension leaving them without a server
   * 
   * @param args The command args
   * @param client The client executing the void command
   * @return Whether the void command was handled
   
  private handleVoid(args: string[], client: Client): boolean {
    // Client is now not connected to a server
    client.connected = false;

    // Remove data and error listeners on TerrariaServer socket
    client.server.socket.removeListener('data', client.ServerHandleData);
    client.server.socket.removeListener('error', client.ServerHandleError);
    client.server.socket.removeListener('close', client.ServerHandleClose);
    client.server.socket.destroy();
    client.sendChatMessage("You have entered the Void. You will soon disappear.");
    return true;
  }
  */
};

export default ClientCommandHandler;
